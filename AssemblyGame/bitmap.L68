00001540 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 10/9/2024 7:28:57 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Bitmap Module
00000000                             3  * Written by :  Juno Strunk
00000000                             4  * Date       :  9/25/24
00000000                             5  * Description:  Load, unload, and draw bitmaps
00000000                             6  *-----------------------------------------------------------
00000000                             7      
00000000                             8  BMP_LOAD_REGS       REG     d2/a2-a3
00000000                             9  BMP_DRAW_REGS       REG     d5-d7
00000000                            10  
00000000  =0000FFFF                 11  BMP_LSBY_MASK       EQU     $0000FFFF
00000000  =FFFF0000                 12  BMP_MSBY_MASK       EQU     $FFFF0000
00000000                            13  
00000000  =00401000                 14  BMP_MAX_FILESIZE    EQU     $401000
00000000  =0000000A                 15  BMP_OFFS_PIXELGET   EQU     10
00000000  =00000012                 16  BMP_OFFS_IMGWH      EQU     18
00000000  =0000001C                 17  BMP_OFFS_BPP        EQU     28
00000000  =00000022                 18  BMP_OFFS_SIZE       EQU     34
00000000                            19  
00000000  =00000004                 20  BMP_BYTESPERPIX_32  EQU     4
00000000  =00000003                 21  BMP_BYTESPERPIX_24  EQU     3
00000000                            22  
00000000  =0000424D                 23  BMP_FILESIGN        EQU     $424D
00000000                            24  
00000000                            25  *---
00000000                            26  * Loads a bitmap into memory
00000000                            27  * Max size of 4194370 (1024x1024)
00000000                            28  *
00000000                            29  *--- In
00000000                            30  * a1 - address of null-terminated filename
00000000                            31  * d1.l - size to load
00000000                            32  * 
00000000                            33  *--- Out
00000000                            34  * a1 - address of loaded BMP file in memory
00000000                            35  * d1 - offset to pixels
00000000                            36  * d0.b  - Error code
00000000                            37  *       - 0 = success
00000000                            38  *       - 1 = file size too large
00000000                            39  *       - 2 = not enough memory
00000000                            40  *       - 3 = file error
00000000                            41  *
00000000                            42  *---
00000000                            43  bmp_Load:
00000000                            44      
00000000  48E7 2030                 45      movem.l BMP_LOAD_REGS, -(sp)
00000004                            46      
00000004                            47      * save a1 for now
00000004  2449                      48      move.l  a1, a2
00000006                            49      
00000006                            50      * Check file size ---
00000006  B2BC 00401000             51      cmp.l   #BMP_MAX_FILESIZE, d1
0000000C  6E00 006C                 52      bgt     .er_size
00000010                            53      
00000010  2001                      54      move.l  d1, d0
00000012  C0BC 00000001             55      and.l   #%00000001, d0
00000018  B0BC 00000001             56      cmp.l   #%00000001, d0
0000001E  6700 0064                 57      beq     .er_mem
00000022                            58      
00000022                            59      * --- Mem Alloc In
00000022                            60      * d1.l - Size needed
00000022                            61      
Line 62 ERROR: Undefined symbol
00000022  6100 BCF2                 62      bsr     mem_Alloc
00000026  4A00                      63      tst.b   d0
00000028  6600 005A                 64      bne     .er_mem
0000002C                            65      * a0 now has the pointer to buffer in memory
0000002C                            66      
0000002C                            67      * save pointer to buffer for later
0000002C  2648                      68      move.l  a0, a3
0000002E                            69      
Line 70 ERROR: Undefined symbol
0000002E  6100 BCE6                 70      bsr     mem_GetSize
00000032                            71      * d1 now has the size again
00000032                            72      
00000032                            73      * --- File Read In
00000032                            74      * a1 - start address of filename
00000032                            75      * a2 - start address of buffer to read to
00000032                            76      * d1.l - size of buffer to read
00000032                            77      
00000032                            78      * move file name back into a1
00000032                            79      * move pointer to memory into a2 for file_Read
00000032  224A                      80      move.l  a2, a1
00000034  2448                      81      move.l  a0, a2
00000036                            82      
Line 83 ERROR: Undefined symbol
00000036  6100 BCDE                 83      bsr     file_Read
0000003A  4A00                      84      tst.b   d0
0000003C  6600 0050                 85      bne     .er_file
00000040                            86      * --- File Read Out
00000040                            87      * a1   - start address of buffer read to (a2)
00000040                            88      * d1.l - number of bytes read
00000040                            89      
00000040                            90      * --- Mem Shrink In
00000040                            91      * a1 - start address of allocation
00000040                            92      * d1.l - new size
Line 93 ERROR: Undefined symbol
00000040  6100 BCD4                 93      bsr     mem_Shrink
00000044  4A00                      94      tst.b   d0
00000046  6600 003C                 95      bne     .er_mem
0000004A                            96      
0000004A                            97      * Process Pixels ---
0000004A                            98      * Restore a1 to pointer to buffer
0000004A  224B                      99      move.l  a3, a1
0000004C                           100      * Get image size
0000004C  2429 0022                101      move.l  BMP_OFFS_SIZE(a1), d2
00000050  E15A                     102      rol.w   #8, d2
00000052  4842                     103      swap    d2
00000054  E15A                     104      rol.w   #8, d2
00000056                           105      
00000056                           106      * Get to pixels
00000056  2229 000A                107      move.l  BMP_OFFS_PIXELGET(a1), d1
0000005A  E159                     108      rol.w   #8, d1
0000005C  4841                     109      swap    d1
0000005E  E159                     110      rol.w   #8, d1
00000060  D3C1                     111      add.l   d1, a1
00000062                           112      
00000062                           113      * Get bound with image size
00000062  D489                     114      add.l   a1, d2
00000064                           115      
00000064                           116      * Loop through pixels
00000064                           117      
00000064                           118  .pxl_Loop
00000064                           119      
00000064                           120      * Adjust colors
00000064  2211                     121      move.l  (a1), d1
00000066  E089                     122      lsr.l   #8, d1
00000068                           123      
00000068  5889                     124      add.l   #4, a1
0000006A                           125  
0000006A  B3C2                     126      cmp.l   d2, a1
0000006C  6DF6                     127      blt     .pxl_Loop
0000006E                           128      
0000006E                           129      *Restore a1 again
0000006E  224B                     130      move.l  a3, a1
00000070                           131      
00000070                           132  .done
00000070  103C 0000                133      move.b  #0, d0
00000074  4CDF 0C04                134      movem.l (sp)+, BMP_LOAD_REGS
00000078  4E75                     135      rts
0000007A                           136      
0000007A                           137  .er_Size
0000007A  103C 0001                138      move.b  #1, d0
0000007E  4CDF 0C04                139      movem.l (sp)+, BMP_LOAD_REGS
00000082  4E75                     140      rts
00000084                           141      
00000084                           142  .er_mem
00000084  103C 0002                143      move.b  #2, d0
00000088  4CDF 0C04                144      movem.l (sp)+, BMP_LOAD_REGS
0000008C  4E75                     145      rts
0000008E                           146      
0000008E                           147  .er_file
0000008E  103C 0003                148      move.b  #3, d0
00000092  4CDF 0C04                149      movem.l (sp)+, BMP_LOAD_REGS
00000096  4E75                     150      rts
00000098                           151  
00000098                           152  *---
00000098                           153  * Unloads a bitmap from memory
00000098                           154  *
00000098                           155  *--- In
00000098                           156  * a1 - address of loaded BMP
00000098                           157  * 
00000098                           158  *--- Out
00000098                           159  * d0.b  - Error code 0=success, non-zero=failure
00000098                           160  *       - 2 = memory failure
00000098                           161  *
00000098                           162  *---
00000098                           163  bmp_Unload:
00000098                           164      
00000098                           165      * Check to make sure pointer is in correct place
00000098  3011                     166      move.w  (a1), d0
0000009A  B07C 424D                167      cmp.w   #BMP_FILESIGN, d0
0000009E  6600 0012                168      bne     .er_mem
000000A2                           169      
Line 170 ERROR: Undefined symbol
000000A2  6100 BC72                170      bsr     mem_Free
000000A6  4A00                     171      tst.b   d0
000000A8  6600 0008                172      bne     .er_mem
000000AC                           173  
000000AC                           174  .done
000000AC  103C 0000                175      move.b  #0, d0
000000B0  4E75                     176      rts
000000B2                           177  
000000B2                           178  .er_mem
000000B2  103C 0002                179      move.b  #2, d0
000000B6  4E75                     180      rts
000000B8                           181  
000000B8                           182  *---
000000B8                           183  * Draws bitmap
000000B8                           184  *
000000B8                           185  *--- In
000000B8                           186  * a1 - address of loaded BMP
000000B8                           187  * d1.l - pixel offset
000000B8                           188  * d2.l - Point in screen coordinates to start
000000B8                           189  * d3.l - Rect starting point (x, y)
000000B8                           190  * d4.l - Rect (Width, Height)
000000B8                           191  * 
000000B8                           192  *--- Out
000000B8                           193  * d0.b  - Error code 0=success, non-zero=failure
000000B8                           194  *       - 1 = File error
000000B8                           195  *       - 2 = Bounds error
000000B8                           196  *
000000B8                           197  *---    
000000B8                           198  bmp_DrawTrans:
000000B8  48E7 0700                199      movem.l BMP_DRAW_REGS, -(sp)
000000BC                           200      
000000BC                           201      * Check that we are looking at a bitmap
000000BC  3A11                     202      move.w  (a1), d5
000000BE  BA7C 424D                203      cmp.w   #BMP_FILESIGN, d5
000000C2  6600 00E6                204      bne     .er_file
000000C6                           205      
000000C6                           206      * Get Image width ---
000000C6  2A29 0012                207      move.l  BMP_OFFS_IMGWH(a1), d5
000000CA                           208      * Get Image height ---
000000CA  5889                     209      add.l   #4, a1
000000CC  2C29 0012                210      move.l  BMP_OFFS_IMGWH(a1), d6
000000D0  5989                     211      sub.l   #4, a1
000000D2                           212      
000000D2                           213      * Switch endian-ness
000000D2  E15D                     214      rol.w   #8, d5
000000D4  4845                     215      swap    d5
000000D6  E15D                     216      rol.w   #8, d5
000000D8  E15E                     217      rol.w   #8, d6
000000DA  4846                     218      swap    d6
000000DC  E15E                     219      rol.w   #8, d6
000000DE                           220      
000000DE                           221      * Bounds checking ---
000000DE                           222      * Check rect height
000000DE  4844                     223      swap    d4
000000E0  B845                     224      cmp.w   d5, d4
000000E2  6E00 00D0                225      bgt     .er_bounds
000000E6  B87C 0000                226      cmp.w   #0, d4
000000EA  6D00 00C8                227      blt     .er_bounds
000000EE                           228      
000000EE                           229      * Check rect width
000000EE  4844                     230      swap    d4
000000F0  B846                     231      cmp.w   d6, d4
000000F2  6E00 00C0                232      bgt     .er_bounds
000000F6  B87C 0000                233      cmp.w   #0, d4
000000FA  6D00 00B8                234      blt     .er_bounds
000000FE                           235      
000000FE                           236      * Check starting y
000000FE  4843                     237      swap    d3
00000100  B645                     238      cmp.w   d5, d3
00000102  6E00 00B0                239      bgt     .er_bounds 
00000106  B67C 0000                240      cmp.w   #0, d3
0000010A  6D00 00A8                241      blt     .er_bounds
0000010E                           242      
0000010E                           243      * Check starting x
0000010E  4843                     244      swap    d3
00000110  B646                     245      cmp.w   d6, d3
00000112  6E00 00A0                246      bgt     .er_bounds
00000116  B67C 0000                247      cmp.w   #0, d3
0000011A  6D00 0098                248      blt     .er_bounds
0000011E                           249      
0000011E                           250      * Calc bytes to subract ---
0000011E  2E05                     251      move.l  d5, d7
00000120  4844                     252      swap    d4
00000122  DE44                     253      add.w   d4, d7
00000124  4844                     254      swap    d4
00000126  CEFC 0004                255      mulu.w  #BMP_BYTESPERPIX_32, d7
0000012A                           256      
0000012A                           257      * Move a1 to pixels (And free d1) ---
0000012A  D3C1                     258      add.l   d1, a1
0000012C  4281                     259      clr.l   d1          * Unneccessary but easier for debug
0000012E                           260      
0000012E                           261      * Move screen coords into d1 and d2 ---
0000012E                           262  *    swap    d2
0000012E                           263  *    move.w  d2, d1
0000012E                           264  *    clr.w   d2          * Unneccessary but easier for debug
0000012E                           265  *    swap    d2
0000012E                           266      
0000012E                           267      * Get image offset coords ---
0000012E                           268      * (ImageHeight  - starting y)
0000012E  9C43                     269      sub.w   d3, d6
00000130                           270      
00000130                           271      * Subtract by 1 if != 0
00000130  BC7C 0000                272      cmp.w   #0, d6
00000134  6700 0004                273      beq     .zeroRow
00000138  5346                     274      sub.w   #1, d6
0000013A                           275      
0000013A                           276  .zeroRow
0000013A                           277      * multiply by Image Width
0000013A  CCC5                     278      mulu.w  d5, d6      * d5 no longer needed
0000013C  4285                     279      clr.l   d5
0000013E                           280      
0000013E                           281      * Add starting x
0000013E  4843                     282      swap    d3
00000140  3A03                     283      move.w  d3, d5
00000142  DC85                     284      add.l   d5, d6      
00000144  E586                     285      asl.l   #2, d6  * Multiply by 4, for 32 bit
00000146  D3C6                     286      add.l   d6, a1
00000148  4285                     287      clr.l   d5
0000014A                           288      
0000014A                           289      * Calc Bounds ---
0000014A                           290      * Move width and height into
0000014A                           291      * d4 High word - Rect Height
0000014A                           292      * d4 Low word - Rect Width
0000014A  4844                     293      swap    d4
0000014C  3A04                     294      move.w  d4, d5
0000014E                           295      
0000014E                           296      * Add starting points (if not zero)
0000014E  4842                     297      swap    d2
00000150  B47C 0000                298      cmp.w   #0, d2
00000154  6700 0004                299      beq     .zeroX
00000158  D842                     300      add.w   d2, d4
0000015A                           301      
0000015A                           302  .zeroX
0000015A  4842                     303      swap    d2
0000015C  B47C 0000                304      cmp.w   #0, d2
00000160  6700 0008                305      beq     .zeroY
00000164  4844                     306      swap    d4
00000166  D842                     307      add.w   d2, d4
00000168  4844                     308      swap    d4
0000016A                           309      
0000016A                           310  .zeroY
0000016A                           311      * Swap because you swap in rowLoop
0000016A  4844                     312      swap    d4
0000016C                           313      
0000016C                           314  * ===== 32 Bit Draw Loop =============================
0000016C                           315          
0000016C                           316      * d0 needed for trap codes
0000016C                           317      * Pen color needs to be in d1
0000016C                           318      * screen coords need to be in d1 and d2
0000016C                           319      * -- d3 will hold d1 when context switching
0000016C                           320      * -- d6 will hold the color offset
0000016C                           321  .rowLoop_32
0000016C                           322      * Swap back to get width
0000016C  4844                     323      swap    d4
0000016E  4842                     324      swap    d2
00000170                           325  .colLoop_32
00000170                           326  
00000170                           327      * Get color ---
00000170                           328      * Rotate for ABGR
00000170                           329      * Get next color
00000170  2211                     330      move.l  (a1), d1
00000172  B2BC 00000000            331      cmp.l   #0, d1
00000178  6700 0010                332      beq     .incCol_32
0000017C                           333  *    lsr.l   #8, d1
0000017C                           334      
0000017C                           335      * Set Pen Color
0000017C  7050                     336      move.l  #80, d0
0000017E  4E4F                     337      trap    #15
00000180                           338      
00000180                           339      * Reset screen coord x
00000180  3202                     340      move.w  d2, d1
00000182  4842                     341      swap    d2
00000184                           342      
00000184                           343      * Draw Pixel ---
00000184  7052                     344      move.l  #82, d0
00000186  4E4F                     345      trap    #15
00000188                           346      
00000188  4842                     347      swap    d2
0000018A                           348      
0000018A                           349  .incCol_32
0000018A                           350      * Move screen coord col (x) ---
0000018A  5242                     351      add.w   #1, d2
0000018C  5889                     352      add.l  #4, a1
0000018E                           353      
0000018E  B444                     354      cmp.w   d4, d2
00000190  6DDE                     355      blt     .colLoop_32
00000192                           356      * Closes colLoop ======================
00000192                           357      
00000192                           358      * Clear screen coord col (x) ---
00000192  9445                     359      sub.w   d5, d2
00000194                           360      
00000194                           361      * Move offset backwards ---
00000194  93C7                     362      sub.l   d7, a1
00000196                           363      
00000196                           364      * Move screen coord row (y) ---
00000196  4842                     365      swap    d2
00000198  5242                     366      add.w   #1, d2
0000019A                           367      
0000019A                           368      * Get High word (Rect Height)
0000019A  4844                     369      swap    d4
0000019C                           370      
0000019C  B444                     371      cmp.w   d4, d2
0000019E  6DCC                     372      blt     .rowLoop_32
000001A0                           373      * Closes rowLoop =====================
000001A0                           374      
000001A0  103C 0000                375      move.b  #0, d0
000001A4  4CDF 00E0                376      movem.l (sp)+, BMP_DRAW_REGS
000001A8  4E75                     377      rts
000001AA                           378  
000001AA                           379      
000001AA                           380  .er_file
000001AA  103C 0001                381      move.b  #1, d0
000001AE  4CDF 00E0                382      movem.l (sp)+, BMP_DRAW_REGS
000001B2  4E75                     383      rts
000001B4                           384      
000001B4                           385  .er_bounds
000001B4  103C 0002                386      move.b  #2, d0
000001B8  4CDF 00E0                387      movem.l (sp)+, BMP_DRAW_REGS
000001BC  4E75                     388      rts
000001BE                           389      
000001BE                           390  *---
000001BE                           391  * Draws bitmap
000001BE                           392  *
000001BE                           393  *--- In
000001BE                           394  * a1 - address of loaded BMP
000001BE                           395  * d1.l - pixel offset
000001BE                           396  * d2.l - Point in screen coordinates to start
000001BE                           397  * d3.l - Rect starting point (x, y)
000001BE                           398  * d4.l - Rect (Width, Height)
000001BE                           399  * 
000001BE                           400  *--- Out
000001BE                           401  * d0.b  - Error code 0=success, non-zero=failure
000001BE                           402  *       - 1 = File error
000001BE                           403  *       - 2 = Bounds error
000001BE                           404  *
000001BE                           405  *---    
000001BE                           406  bmp_Draw:
000001BE  48E7 0700                407      movem.l BMP_DRAW_REGS, -(sp)
000001C2                           408      
000001C2                           409      * Check that we are looking at a bitmap
000001C2  3A11                     410      move.w  (a1), d5
000001C4  BA7C 424D                411      cmp.w   #BMP_FILESIGN, d5
000001C8  6600 00DC                412      bne     .er_file
000001CC                           413      
000001CC                           414      * Get Image width ---
000001CC  2A29 0012                415      move.l  BMP_OFFS_IMGWH(a1), d5
000001D0                           416      * Get Image height ---
000001D0  5889                     417      add.l   #4, a1
000001D2  2C29 0012                418      move.l  BMP_OFFS_IMGWH(a1), d6
000001D6  5989                     419      sub.l   #4, a1
000001D8                           420      
000001D8                           421      * Switch endian-ness
000001D8  E15D                     422      rol.w   #8, d5
000001DA  4845                     423      swap    d5
000001DC  E15D                     424      rol.w   #8, d5
000001DE  E15E                     425      rol.w   #8, d6
000001E0  4846                     426      swap    d6
000001E2  E15E                     427      rol.w   #8, d6
000001E4                           428      
000001E4                           429      * Bounds checking ---
000001E4                           430      * Check rect height
000001E4  4844                     431      swap    d4
000001E6  B845                     432      cmp.w   d5, d4
000001E8  6E00 00C6                433      bgt     .er_bounds
000001EC  B87C 0000                434      cmp.w   #0, d4
000001F0  6D00 00BE                435      blt     .er_bounds
000001F4                           436      
000001F4                           437      * Check rect width
000001F4  4844                     438      swap    d4
000001F6  B846                     439      cmp.w   d6, d4
000001F8  6E00 00B6                440      bgt     .er_bounds
000001FC  B87C 0000                441      cmp.w   #0, d4
00000200  6D00 00AE                442      blt     .er_bounds
00000204                           443      
00000204                           444      * Check starting y
00000204  4843                     445      swap    d3
00000206  B645                     446      cmp.w   d5, d3
00000208  6E00 00A6                447      bgt     .er_bounds 
0000020C  B67C 0000                448      cmp.w   #0, d3
00000210  6D00 009E                449      blt     .er_bounds
00000214                           450      
00000214                           451      * Check starting x
00000214  4843                     452      swap    d3
00000216  B646                     453      cmp.w   d6, d3
00000218  6E00 0096                454      bgt     .er_bounds
0000021C  B67C 0000                455      cmp.w   #0, d3
00000220  6D00 008E                456      blt     .er_bounds
00000224                           457      
00000224                           458      * Calc bytes to subract ---
00000224  2E05                     459      move.l  d5, d7
00000226  4844                     460      swap    d4
00000228  DE44                     461      add.w   d4, d7
0000022A  4844                     462      swap    d4
0000022C  CEFC 0004                463      mulu.w  #BMP_BYTESPERPIX_32, d7
00000230                           464      
00000230                           465      * Move a1 to pixels (And free d1) ---
00000230  D3C1                     466      add.l   d1, a1
00000232  4281                     467      clr.l   d1          * Unneccessary but easier for debug
00000234                           468      
00000234                           469      * Move screen coords into d1 and d2 ---
00000234                           470  *    swap    d2
00000234                           471  *    move.w  d2, d1
00000234                           472  *    clr.w   d2          * Unneccessary but easier for debug
00000234                           473  *    swap    d2
00000234                           474      
00000234                           475      * Get image offset coords ---
00000234                           476      * (ImageHeight  - starting y)
00000234  9C43                     477      sub.w   d3, d6
00000236                           478      
00000236                           479      * Subtract by 1 if != 0
00000236  BC7C 0000                480      cmp.w   #0, d6
0000023A  6700 0004                481      beq     .zeroRow
0000023E  5346                     482      sub.w   #1, d6
00000240                           483      
00000240                           484  .zeroRow
00000240                           485      * multiply by Image Width
00000240  CCC5                     486      mulu.w  d5, d6      * d5 no longer needed
00000242  4285                     487      clr.l   d5
00000244                           488      
00000244                           489      * Add starting x
00000244  4843                     490      swap    d3
00000246  3A03                     491      move.w  d3, d5
00000248  DC85                     492      add.l   d5, d6      
0000024A  E586                     493      asl.l   #2, d6  * Multiply by 4, for 32 bit
0000024C  D3C6                     494      add.l   d6, a1
0000024E  4285                     495      clr.l   d5
00000250                           496      
00000250                           497      * Calc Bounds ---
00000250                           498      * Move width and height into
00000250                           499      * d4 High word - Rect Height
00000250                           500      * d4 Low word - Rect Width
00000250  4844                     501      swap    d4
00000252  3A04                     502      move.w  d4, d5
00000254                           503      
00000254                           504      * Add starting points (if not zero)
00000254  4842                     505      swap    d2
00000256  B47C 0000                506      cmp.w   #0, d2
0000025A  6700 0004                507      beq     .zeroX
0000025E  D842                     508      add.w   d2, d4
00000260                           509      
00000260                           510  .zeroX
00000260  4842                     511      swap    d2
00000262  B47C 0000                512      cmp.w   #0, d2
00000266  6700 0008                513      beq     .zeroY
0000026A  4844                     514      swap    d4
0000026C  D842                     515      add.w   d2, d4
0000026E  4844                     516      swap    d4
00000270                           517      
00000270                           518  .zeroY
00000270                           519      * Swap because you swap in rowLoop
00000270  4844                     520      swap    d4
00000272                           521      
00000272                           522      * Now multiply by bit depth and switch to correct draw loop
00000272                           523  *    move.l  BMP_OFFS_BPP(a1), d0
00000272                           524  *    cmp.l   #BMP_BYTESPERPIX_32, d0
00000272                           525  *    bne     .twenty_four
00000272                           526      
00000272                           527  * ===== 32 Bit Draw Loop =============================
00000272                           528          
00000272                           529      * d0 needed for trap codes
00000272                           530      * Pen color needs to be in d1
00000272                           531      * screen coords need to be in d1 and d2
00000272                           532      * -- d3 will hold d1 when context switching
00000272                           533      * -- d6 will hold the color offset
00000272                           534  .rowLoop_32
00000272                           535      * Swap back to get width
00000272  4844                     536      swap    d4
00000274  4842                     537      swap    d2
00000276                           538  .colLoop_32
00000276                           539  
00000276                           540      * Get color ---
00000276                           541      * Rotate for ABGR
00000276                           542      * Get next color
00000276  2211                     543      move.l  (a1), d1
00000278                           544  *    lsr.l   #8, d1
00000278                           545      
00000278                           546      * Set Pen Color
00000278  7050                     547      move.l  #80, d0
0000027A  4E4F                     548      trap    #15
0000027C                           549      
0000027C                           550      * Reset screen coord x
0000027C  3202                     551      move.w  d2, d1
0000027E  4842                     552      swap    d2
00000280                           553      
00000280                           554      * Draw Pixel ---
00000280  7052                     555      move.l  #82, d0
00000282  4E4F                     556      trap    #15
00000284                           557      
00000284  4842                     558      swap    d2
00000286                           559      
00000286  5242                     560      add.w   #1, d2
00000288  5889                     561      add.l  #4, a1
0000028A                           562      
0000028A  B444                     563      cmp.w   d4, d2
0000028C  6DE8                     564      blt     .colLoop_32
0000028E                           565      * Closes colLoop ======================
0000028E                           566      
0000028E                           567      * Clear screen coord col (x) ---
0000028E  9445                     568      sub.w   d5, d2
00000290                           569      
00000290                           570      * Move offset backwards ---
00000290  93C7                     571      sub.l   d7, a1
00000292                           572      
00000292                           573      * Move screen coord row (y) ---
00000292  4842                     574      swap    d2
00000294  5242                     575      add.w   #1, d2
00000296                           576      
00000296                           577      * Get High word (Rect Height)
00000296  4844                     578      swap    d4
00000298                           579      
00000298  B444                     580      cmp.w   d4, d2
0000029A  6DD6                     581      blt     .rowLoop_32
0000029C                           582      * Closes rowLoop =====================
0000029C                           583      
0000029C  103C 0000                584      move.b  #0, d0
000002A0  4CDF 00E0                585      movem.l (sp)+, BMP_DRAW_REGS
000002A4  4E75                     586      rts
000002A6                           587  
000002A6                           588      
000002A6                           589  .er_file
000002A6  103C 0001                590      move.b  #1, d0
000002AA  4CDF 00E0                591      movem.l (sp)+, BMP_DRAW_REGS
000002AE  4E75                     592      rts
000002B0                           593      
000002B0                           594  .er_bounds
000002B0  103C 0002                595      move.b  #2, d0
000002B4  4CDF 00E0                596      movem.l (sp)+, BMP_DRAW_REGS
000002B8  4E75                     597      rts
000002BA                           598  
000002BA                           599  
000002BA                           600  *---
000002BA                           601  * Takes in a little endian and converts it
000002BA                           602  * to big endian
000002BA                           603  *
000002BA                           604  * --- In
000002BA                           605  * d1.l  - Little endian value
000002BA                           606  *
000002BA                           607  * --- Out
000002BA                           608  * d1.l - Big endian value
000002BA                           609  * 
000002BA                           610  *---    
000002BA                           611  bmp_Endian:
000002BA                           612      
000002BA                           613      *---
000002BA                           614      * 03 02 01 00
000002BA                           615      * 03 02 00 01 Rotate.w #8, d1
000002BA                           616      * 00 01 03 02 Swap     d1
000002BA                           617      * 00 01 02 03 Rotate.w #8, d1
000002BA                           618      *---
000002BA                           619      
000002BA  E159                     620      rol.w   #8, d1
000002BC  4841                     621      swap    d1
000002BE  E159                     622      rol.w   #8, d1
000002C0                           623      
000002C0  4E75                     624      rts
000002C2                           625  
000002C2                           626  
000002C2                           627  
000002C2                           628  
000002C2                           629  
000002C2                           630  
000002C2                           631  
000002C2                           632  
000002C2                           633  
000002C2                           634  
000002C2                           635  
000002C2                           636  
Line 637 WARNING: END directive missing, starting address not set

5 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BMP_BYTESPERPIX_24  3
BMP_BYTESPERPIX_32  4
BMP_DRAW            1BE
BMP_DRAW:COLLOOP_32  276
BMP_DRAW:ER_BOUNDS  2B0
BMP_DRAW:ER_FILE    2A6
BMP_DRAW:ROWLOOP_32  272
BMP_DRAW:ZEROROW    240
BMP_DRAW:ZEROX      260
BMP_DRAW:ZEROY      270
BMP_DRAWTRANS       B8
BMP_DRAWTRANS:COLLOOP_32  170
BMP_DRAWTRANS:ER_BOUNDS  1B4
BMP_DRAWTRANS:ER_FILE  1AA
BMP_DRAWTRANS:INCCOL_32  18A
BMP_DRAWTRANS:ROWLOOP_32  16C
BMP_DRAWTRANS:ZEROROW  13A
BMP_DRAWTRANS:ZEROX  15A
BMP_DRAWTRANS:ZEROY  16A
BMP_DRAW_REGS       E0
BMP_ENDIAN          2BA
BMP_FILESIGN        424D
BMP_LOAD            0
BMP_LOAD:DONE       70
BMP_LOAD:ER_FILE    8E
BMP_LOAD:ER_MEM     84
BMP_LOAD:ER_SIZE    7A
BMP_LOAD:PXL_LOOP   64
BMP_LOAD_REGS       C04
BMP_LSBY_MASK       FFFF
BMP_MAX_FILESIZE    401000
BMP_MSBY_MASK       FFFF0000
BMP_OFFS_BPP        1C
BMP_OFFS_IMGWH      12
BMP_OFFS_PIXELGET   A
BMP_OFFS_SIZE       22
BMP_UNLOAD          98
BMP_UNLOAD:DONE     AC
BMP_UNLOAD:ER_MEM   B2
